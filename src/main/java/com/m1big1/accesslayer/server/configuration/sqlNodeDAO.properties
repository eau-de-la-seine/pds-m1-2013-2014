SELECT_NODES_getNodeByUserID = 			SELECT * \
										FROM files_table \
										WHERE fk_id_user = ? \
										ORDER BY right_index DESC
	
SELECT_NODES_SearchWord =				SELECT id_file, \
										GROUP_CONCAT(node_path ORDER BY numrow ASC SEPARATOR '/' ) AS complete_path \
										FROM ( \
											SELECT \
												t1.id_file, \
												t2.file_name AS node_path, \
												t2.left_index AS numrow \
												FROM files_table t1, files_table t2 \
											WHERE t1.fk_id_type = ? \
											AND t1.fk_id_user = ? \
											AND t1.fk_id_user = t2.fk_id_user \
											AND t1.file_name LIKE ? \
											AND t2.left_index <= t1.left_index \
											AND t2.right_index >= t1.right_index \
											ORDER BY t1.right_index DESC, t2.left_index ASC \
										) AS ta2 \
										GROUP BY id_file 

SELECT_NODES_getNodeFullPath = 			SELECT GROUP_CONCAT(node_path ORDER BY numrow ASC SEPARATOR '/' ) AS complete_path \
										FROM ( \
											SELECT \
												t1.id_file, \
												t2.file_name AS node_path, \
												t2.left_index AS numrow \
											FROM files_table t1, files_table t2 \
											WHERE t1.fk_id_user = t2.fk_id_user \
											AND t1.id_file = ? \
											AND t2.left_index <= t1.left_index \
											AND t2.right_index >= t1.right_index \
											ORDER BY t1.right_index DESC, t2.left_index ASC \
										) AS ta2 \
										GROUP BY id_file \
												
SELECT_NODES_SearchWord2 =				SELECT * \
										FROM files_table \
										WHERE fk_id_user = ? \
										AND fk_id_type = ? \
										AND file_name LIKE ? \
										ORDER BY right_index DESC
										
SELECT_NODES_find_byID = 				SELECT * \
										FROM files_table \
										WHERE id_file = ?

SELECT_checkNodeRename = 				SELECT NOT EXISTS ( \
											SELECT * \
											FROM files_table AS current_node \
											JOIN files_table AS other_node \
											ON current_node.fk_id_user = other_node.fk_id_user \
											AND current_node.id_file <> other_node.id_file \
											AND current_node.fk_id_type = other_node.fk_id_type \
											AND current_node.id_file_parent = other_node.id_file_parent \
											WHERE current_node.fk_id_user = ? AND current_node.id_file = ? \
											AND other_node.file_name = ? \
										) AS value
								
SELECT_checkNode =						SELECT EXISTS ( \
											SELECT * \
											FROM files_table \
											WHERE fk_id_user = ? \
											AND id_file = ? \
										)
								
SELECT_NODES_leftindex_create = 		SELECT left_index \
										FROM files_table \
										WHERE id_file=?
								
SELECT_NODES_checkParent_createNode =	SELECT EXISTS ( \
											SELECT * \
											FROM files_table \
											WHERE fk_id_user = ? \
											AND id_file = ? \
											AND fk_id_type = 1 \
										)

DELETE_NODES_delete =					DELETE FROM files_table \
										WHERE fk_id_user = ? \
										AND left_index >= ? \
										AND right_index <= ?

UPDATE_NODES_changeContent =			UPDATE files_table \
										SET file_content = ? \
										WHERE fk_id_user = ? \
										AND id_file = ?
										
UPDATE_NODES_rename =					UPDATE files_table \
										SET file_name = ? \
										WHERE fk_id_user = ? \
										AND id_file = ?

UPDATE_NODES_left_index = 				UPDATE files_table \
										SET left_index = left_index - ? \
										WHERE fk_id_user = ? \
										AND left_index > ?
										
UPDATE_NODES_right_index = 				UPDATE files_table \
										SET right_index = right_index - ? \
										WHERE fk_id_user = ? \
										AND right_index > ?

UPDATE_NODES_leftIndex_createNode = 	UPDATE files_table \
										SET right_index=right_index+2 \
										WHERE right_index > ? \
										AND fk_id_user = ?
UPDATE_NODES_rightIndex_createNode = 	UPDATE files_table \
										SET left_index=left_index+2 \
										WHERE left_index > ? \
										AND fk_id_user = ?
INSERT_NODES_createNode = 				INSERT INTO files_table (\
											id_file_parent, \
											file_name, \
											fk_id_user, \
											fk_id_type, \
											left_index, \
											right_index \
										) VALUES (?, ?, ?, ?, ?, ?)
										
SELECT_NODES_duplicatedName_createNode= SELECT NOT EXISTS ( \
											SELECT * \
											FROM files_table \
											WHERE fk_id_user = ? \
											AND id_file_parent = ? \
											AND fk_id_type = ? \
											AND file_name = ? \
										)
										
SELECT_NODES_createNode = 				SELECT LAST_INSERT_ID()